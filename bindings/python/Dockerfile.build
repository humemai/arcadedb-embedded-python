# Docker build for ArcadeDB Python package
# Builds arcadedb-embedded package variants (base and jre) with custom JAR filtering
# Uses original ArcadeDB distribution but excludes gRPC wire protocol to optimize size
#
# REQUIRED BUILD ARGS (passed from build-all.sh):
#   VARIANT - one of: base, jre
#   PACKAGE_NAME - e.g., arcadedb-embedded, arcadedb-embedded-jre
#   PACKAGE_DESCRIPTION - package description
#   ARCADEDB_TAG - version tag from pom.xml (e.g., 25.10.1-SNAPSHOT)
#                  Default below is fallback; build-all.sh extracts and passes actual version

ARG VARIANT=base
ARG PACKAGE_NAME=arcadedb-embedded
ARG PACKAGE_DESCRIPTION="ArcadeDB embedded Python package"
ARG ARCADEDB_TAG=25.10.1-SNAPSHOT

# Stage 1: Use prebuilt ArcadeDB image to obtain compiled JARs
# We use the original distribution and selectively exclude only gRPC for Python use cases
FROM arcadedata/arcadedb:${ARCADEDB_TAG} AS java-builder

# nothing to do here; jars will be copied from /home/arcadedb/lib in the python-builder stage

# Stage 2: Build Python wheel

FROM python:3.11-slim AS python-builder

# Install system dependencies (JDK needed for JPype at build/test time)
RUN apt-get update && apt-get install -y \
    openjdk-21-jdk \
    && rm -rf /var/lib/apt/lists/*

# Set JAVA_HOME
ENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
ENV PATH=$PATH:$JAVA_HOME/bin

WORKDIR /build

# Copy compiled JARs from the prebuilt ArcadeDB image
# The official image places JARs under /home/arcadedb/lib
RUN mkdir -p /build/jars
COPY --from=java-builder /home/arcadedb/lib /build/jars/

# Copy Python bindings source
COPY bindings/python/src ./src
COPY bindings/python/tests ./tests
COPY bindings/python/setup_jars.py .
COPY bindings/python/extract_version.py .
COPY bindings/python/write_version.py .
COPY bindings/python/pyproject.toml ./
COPY bindings/python/README.md ./

# Also copy repository pom.xml so extract_version.py can read it
COPY ../../pom.xml /arcadedb/pom.xml

# Install Python build dependencies
RUN pip install --no-cache-dir build wheel setuptools jpype1

# Re-declare build args for this stage (required after FROM)
ARG VARIANT
ARG PACKAGE_NAME
ARG PACKAGE_DESCRIPTION
ARG ARCADEDB_TAG
ENV ARCADEDB_VARIANT=${VARIANT}

# Extract version and copy JARs
# Version is passed from build-all.sh via ARCADEDB_TAG build arg
RUN echo "ðŸ“Œ Building variant: ${VARIANT}" && \
    echo "ðŸ“Œ Package name: ${PACKAGE_NAME}" && \
    echo "ðŸ“Œ Docker tag used: ${ARCADEDB_TAG}" && \
    python3 write_version.py /arcadedb/pom.xml && \
    python3 setup_jars.py && \
    echo "ðŸ“¦ JAR files copied"

# Build the wheel
# Extract PEP 440 version from pom.xml and use build args for package metadata
RUN export ARCADEDB_VERSION=$(python3 extract_version.py --format=pep440 /arcadedb/pom.xml) && \
    echo "ðŸ“¦ Python package version: ${ARCADEDB_VERSION}" && \
    echo "ðŸ“¦ Package name: ${PACKAGE_NAME}" && \
    echo "ðŸ“¦ Package description: ${PACKAGE_DESCRIPTION}" && \
    sed -i 's|^name = .*|name = "'"${PACKAGE_NAME}"'"|' pyproject.toml && \
    sed -i 's|^version = .*|version = "'"${ARCADEDB_VERSION}"'"|' pyproject.toml && \
    sed -i 's|^description = .*|description = "'"${PACKAGE_DESCRIPTION}"'"|' pyproject.toml && \
    python3 -m build --wheel && \
    echo "âœ… Wheel built successfully!" && \
    ls -lh dist/

# Stage 3: Export stage (for extracting wheels)
FROM python-builder AS export
# This stage exists to provide a stable location for wheel extraction
# The dist directory is preserved from python-builder stage

# Stage 4: Test the built wheel
FROM python:3.11-slim AS tester

# Install Java runtime for JPype
RUN apt-get update && apt-get install -y \
    openjdk-21-jre-headless \
    && rm -rf /var/lib/apt/lists/*

ENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
ENV PATH=$PATH:$JAVA_HOME/bin

WORKDIR /test

# Copy the wheel from builder
COPY --from=python-builder /build/dist/*.whl /tmp/

# Install the wheel and test dependencies
RUN pip install --no-cache-dir /tmp/*.whl pytest pytest-cov

# Copy tests
COPY --from=python-builder /build/tests ./tests/

# Create a quick installation test
RUN echo '#!/usr/bin/env python3\n\
import arcadedb_embedded as arcadedb\n\
import tempfile\n\
import shutil\n\
import os\n\
\n\
print("ðŸŽ® Testing ArcadeDB Python bindings...")\n\
print(f"ðŸ“¦ Version: {arcadedb.__version__}")\n\
\n\
temp_dir = tempfile.mkdtemp()\n\
db_path = os.path.join(temp_dir, "test_db")\n\
\n\
try:\n\
    with arcadedb.create_database(db_path) as db:\n\
        print("âœ… Database created")\n\
        \n\
        with db.transaction():\n\
            db.command("sql", "CREATE DOCUMENT TYPE TestDoc")\n\
            db.command("sql", "INSERT INTO TestDoc SET name = '\''docker_test'\'', value = 123")\n\
        print("âœ… Transaction committed")\n\
        \n\
        result = db.query("sql", "SELECT FROM TestDoc")\n\
        for record in result:\n\
            print(f"âœ… Query result: {record.get_property('\''name'\'')} = {record.get_property('\''value'\'')}")\n\
    \n\
    print("ðŸŽ‰ All tests passed!")\n\
finally:\n\
    if os.path.exists(temp_dir):\n\
        shutil.rmtree(temp_dir)\n\
' > /test/test_install.py && chmod +x /test/test_install.py

# Run the installation test
RUN python3 /test/test_install.py

CMD ["python3", "/test/test_install.py"]
